#!/usr/local/bin/perl
#
# vim:set ts=4 sw=4:

$|=1;
chdir("/usr/share/zoneinfo");
inittz();

if($ARGV[0]=~/^-h/){
	print qq("tz [-]target_tz [time]" or "tz local_tz target_tz time [date]"\n);
	print qq(See possible timezones with "tz -list"\n);
	exit;
};
if($ARGV[0]=~/^-l/){
	listtz($ARGV[1]);
};

my $aliases="
# America
NST	Newfoundland Standard Time	HNT	UTC - 3:30 hours
NDT	Newfoundland Daylight Time	HAT	UTC - 2:30 hours
AST	Atlantic Standard Time	HNA	UTC - 4 hours
ADT	Atlantic Daylight Time	HAA	UTC - 3 hours
EST	Eastern Standard Time	HNE	UTC - 5 hours
EDT	Eastern Daylight Time	HAE	UTC - 4 hours
CST	Central Standard Time	HNC	UTC - 6 hours
CDT	Central Daylight Time	HAC	UTC - 5 hours
MST	Mountain Standard Time	HNR	UTC - 7 hours
MDT	Mountain Daylight Time	HAR	UTC - 6 hours
PST	Pacific Standard Time	HNP	UTC - 8 hours
PDT	Pacific Daylight Time	HAP	UTC - 7 hours
AKST	Alaska Standard Time	HNY	UTC - 9 hours
AKDT	Alaska Daylight Time	HAY	UTC - 8 hours
HAST	Hawaii-Aleutian Standard Time		UTC - 10 hours
HADT	Hawaii-Aleutian Daylight Time		UTC - 9 hours
# Australia
NFT	Norfolk (Island) Time		UTC + 11:30 hours
EST	Eastern Standard Time	AEST	UTC + 10 hours
EDT	Eastern Daylight Time	AEDT	UTC + 11 hours
CST	Central Standard Time	ACST	UTC + 9:30 hours
CDT	Central Daylight Time	ACDT	UTC + 10:30 hours
WST	Western Standard Time	AWST	UTC + 8 hours
WDT	Western Daylight Time	AWDT	UTC + 9 hours
CXT	Christmas Island Time		UTC + 7 hours
# Europe
#GMT	Greenwich Mean Time	UTC	UTC
BST	British Summer Time		UTC + 1 hour
IST	Irish Summer Time		UTC + 1 hour
WET	Western European Time		UTC + 0 hours
WEST	Western European Summer Time	WEDT	UTC + 1 hour
CET	Central European Time	MEZ	UTC + 1 hour
CEST	Central European Summer Time	CEDT, MESZ	UTC + 2 hours
EET	Eastern European Time		UTC + 2 hours
EEST	Eastern European Summer Time	EEDT	UTC + 3 hours
MSK	Moscow Standard Time		UTC + 3 hours
MSD	Moscow Daylight Time		UTC + 4 hours
";

for(split(/\n/,$aliases)){
    next if /^\s*(#|$)/;
	($tz,$name,$atz,$diff)=split(/\t/);
	$diff=~/UTC ([+-]) (\d+)(?::(\d\d))? hour/|| do {
		die "Alias parsing error";
	};
	$offset= "${1}$2"+($3/60);
	if(defined $alias{$tz}){
#warn "dupe $tz" ;
	}else{
		$alias{$tz}=$offset;
	};
	if(defined $atz){
		for(split(/, */,$atz)){
			$alias{$_}=$offset;
		};
	};
};

my($from,$to);
$from="Europe/Berlin";
if($ARGV[0]=~/^-L/){
	shift;
	$well=shift;
};
$time=join(":",((localtime(time))[2,1]));

if ($#ARGV == 0){
	$to=shift;
	($from,$to)=($to,$from) if($to =~s/^-//)
}elsif ($#ARGV == 1){
	$to=shift; $time=shift;
	($from,$to)=($to,$from) if($to =~s/^-//)
}elsif ($#ARGV == 2){
	$from=shift; $to=shift; $time=shift;
}elsif ($#ARGV == 3){
	$from=shift; $to=shift; $time=shift;
	$day=shift;
	$day=~/^(\d+)\.(\d+)(?:\.(\d+)?)?$/ || die "Can't parse date. Try dd.mm.[yyyy]\n";
	$tadj=" -v $1d -v $2m";
	$tadj.= $3 ? " -v $3y" : "";
}elsif ($#ARGV == -1 && defined ($well)){
	$to=$well;
}elsif ($#ARGV == -1){
	printf STDERR "Try \"-help\" maybe?\n";
	exit(1);
}else{
	printf STDERR "Err too many arguments: $#ARGV\n";exit(1);
};

my $fromtz=gettz($from);
my $totz=  gettz($to);

if(!defined $fromtz){
	die "TZ \"$from\" not found. Maybe try a city name\n";
};
if(!defined $totz){
	die "TZ \"$to\" not found. Maybe try a city name\n";
};

($from,$to)=($fromtz,$totz);

my ($hr,$min)=checktime($time);

$time=sprintf "%02d:%02d",$hr,$min;

if ($hr>23){
	$hr-=24;$dflg=1;
};

if($hr >23 || $min >59){
	die "Time $hr:$min out of range\n";
};

chomp($t=`TZ=$from date $tadj -v ${hr}H -v ${min}M -v 0S +%s`);

die "Whoops!" if $?;

if ($imnonlocal){
	$t=time;
};

my ($fday,$ftzn,$ftz)=split(/,/,`TZ=$from date -r $t +"%j,%z,%Z,"`);
my ($tday,$ttzn,$ttz)=split(/,/,`TZ=$to date -r $t +"%j,%z,%Z,"`);

chomp($time=`TZ=$from date -r $t +"%H:%M"`);
chomp($result=`TZ=$to date -r $t +"%H:%M"`);
$fday-- if($dflg==1);

if($tday-$fday == 1){
	$add=" (tomorrow)";
}elsif($tday-$fday == -1){
	$add=" (yesterday)";
}elsif($tday==$fday){
	$add="";
}elsif(($fday==366 || $fday ==365)&& $tday==1){
	$add=" (tomorrow)";
}elsif(($tday==366 || $tday ==365)&& $fday==1){
	$add=" (yesterday)";
}else{
	die "Something strange happened: $fday, $tday";
};

$ftzn=~/([-+])(\d\d)(\d\d)/;
$ftzv=$1.($2*60+$3);

$ttzn=~/([-+])(\d\d)(\d\d)/;
$ttzv=$1.($2*60+$3);

$dif=$ttzv-$ftzv;

$change=sprintf "%+03d%02d",$dif/60,$dif%60;

print "$time [$ftz] $change = $result [$ttz]$add\n";

my (%tz);
my (%falias);
sub inittz {
	use File::Find;
	finddepth(sub {
		my $tzname=$File::Find::name;
		$tzname=~s!^.\/!!;
		if (-f $_){
			$tz{$tzname}=1;
		};
	}, ".");

	for(keys(%tz)){
		my $tmp=$_;
		$tmp=~ y/-_+a-zA-Z0-9\///cd;
		$falias{lc $tmp}=$_;

		$tmp=$_;
		$tmp=~ s!.*/!!;
		$tmp=~ y/-_+a-zA-Z0-9\///cd;
		$falias{lc $tmp}=$_;
	};
}


sub gettz {
	my $name= $_[0];
	return $name if defined $tz{$name};

	$name= lc $_[0];
	$name =~ y/-_+a-zA-Z0-9\///cd;
	return $falias{$name} if($falias{$name});

	$name=$_[0];
	if(defined $alias{uc $name}){
		$name="etc/gmt".sprintf"%+d",(-1*$alias{uc $name});
		return $name if($tz{$name});
	};

	$name=$_[0];
	my $r=eval {
		use DBI;
        use FindBin;

		my $dbh = DBI->connect("dbi:SQLite:/home/sec/Project/Scripts/timezone-tool/geo.db","","", { RaiseError => 1 });

		my $result = $dbh->selectrow_hashref('
				SELECT a.name,a.cc,c.tz FROM pop c JOIN adm a 
				ON a.code="ADM1" AND c.cc=a.cc AND c.admin1 = a.admin1 
				WHERE c.name=? ORDER BY c.pop DESC LIMIT 1;', {}, $name);
		if(defined $result->{tz}){
			print "Resolved $name, $result->{name}, $result->{cc} to $result->{tz}\n";
			return $result->{tz};
		};
		return undef;
	};
	return $r if defined $r;

	return undef;
};

sub checktime{
	my $time=shift;

	if($time =~ /^(\d+)(?::(\d+))?(am|pm)?$/){
		$hr=$1; $min=$2||0;
		$hr+=12 if($3 eq "pm");
	}elsif($time =~ /^(\d+)\.(\d+)$/){
		$hr=$1; $min="0.$2"*60;
		if($min != int($min)){
			warn"Warning: Precision loss due to non-integer Minutes.\n";
			$min=int($min);
		};
	}else{
		die "Can't parse $time as Time.\n";
	};
	return($hr,$min);
};

sub listtz{
	my $pat=shift;
	if(defined $pat){
		$pat=~ y/a-zA-Z\///cd;
		if(!$dir{lc $pat}){
			die "No subset: $pat\n";
		};
		chdir($dir{lc $pat});
		$pat=qq( "$pat");
	};
	$pat||="";
	@tz=grep {!/\./} glob("*");
	$l= "Possible$pat Timezones:";
	for(grep {! -d $_} @tz) {
		if (length $l.$_ > 250){
			print "$l\n";$l="+";sleep(1);
		};
		$l.=" ".$_;
	};
	print "$l\n";
	if(grep{ -d $_} @tz){
		print "See also the subsets: ",join(" ",grep{ -d $_} @tz)," [try -list \"Subset\" to see more Timezones]\n";
	};
	exit;
}
